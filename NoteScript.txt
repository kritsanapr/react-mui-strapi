*****************************************************
React NodeJS Docker Workshop Online
*****************************************************
-------------------------------------------------------------
Day 3: React Material UI
-------------------------------------------------------------
-----
# การขึ้นโปรเจ็กต์ React + Vite + TS + SWC+ Material UI
-----
Step 1: Clone Project
---
git clone https://github.com/iamsamitdev/react-mui-strapi.git

Step 2: ตรวจสอบความถูกต้องของ docker-compose.yml ไฟล์
---
docker compose config

Step 3: Create container
---
docker compose up -d
docker compose up -d --build

Step 4: Install Material UI Library
---
npm install @mui/material @emotion/react @emotion/styled

Step 5: Config tsconfig.json
---

"compilerOptions": {
    "lib": ["es6", "dom"],
    "noImplicitAny": true,
    "noImplicitThis": true,
    "strictNullChecks": true,
}

Step 6: ทดสอบเรียกใช้งาน MUI ที่ไฟล์ src/App.tsx
---
*** ลบไฟล์ App.css ใน src อออก
*** ลบคำสั่ง css ในไฟล์ index.css ออกทั้งหมด

import { Button } from '@mui/material'

function App() {

  return (
    <>
      <h1>MUI Button</h1>
      <Button variant="text">Text</Button>
      <Button variant="contained">Contained</Button>
      <Button variant="outlined">Outlined</Button>
    </>
  )
}

export default App

*** เพิ่ม goole font ที่ไฟล์ index.html
---
<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">

กำหนดโค้ดที่ไฟล์ index.css
---
html, body {
    font-family: 'IBM Plex Sans Thai', sans-serif;
}


Step 7: ติดตั้ง Material Icons
---
npm install @mui/icons-material


Step 8: ทดสอบใช้งาน Icons
---
<h3>MUI Button with Icon</h3>
        <Stack direction="row" spacing={2}>
          <Button variant="text" startIcon={<Delete />}>Delete</Button>
          <Button variant="contained" startIcon={<Send />}>Send</Button>
          <Button variant="outlined" startIcon={<Photo />}>Photo</Button>
        </Stack>

Step 9: การสร้าง Theme ใน MUI
---
สร้าง src/config/theme.ts

import { createTheme } from '@mui/material/styles'
import { green, grey, indigo } from '@mui/material/colors'

// Create a theme instance.
let theme = createTheme()

// Custom theme
theme = createTheme(theme, {
    palette: {
        primary: {
            main: grey[700],
            light: grey[50],
            dark: grey[900],
        },
        secondary: {
            main: indigo[50],
        },
        success: {
            main: green[500],
            light: green[50],
            dark: green[900],
        },
    },
    typography: {
        link: {
            fontSize: '0.8rem',
            [theme.breakpoints.up('md')]: {
                fontSize: '0.9rem',
            },
            fontWeight: 500,
            color: theme.palette.primary.main,
            display: 'block',
            cursor: 'pointer'
        },
        cardTitle: {
            fontSize: '1.2rem',
            display: 'block',
            fontWeight: 500
        },
        h6: {
            fontSize: '1rem',
        },
        h7: {
            fontSize: '0.8rem', 
        },
        h8: {
            fontSize: '0.7rem', 
        }
    },
})

export default theme

Step 10: config ไฟล์ main.tsx
---
import React from 'react'
import ReactDOM from 'react-dom/client'

// ThemeProvider is required for Material-UI
import { ThemeProvider } from '@mui/material'

// Import the theme
import theme from './config/theme'

import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
    <App />
    </ThemeProvider>
  </React.StrictMode>,
)


Step 11: Create AuthLayout.tsx in src/layouts
---
import { Outlet } from "react-router-dom"
import { Box } from "@mui/material"

const AuthLayout = () => {
  return (
    <>
      <Box>
        <Outlet />
      </Box>
    </>
  )
}

export default AuthLayout

Step 12: Install react-pro-sidebar
---
npm i react-pro-sidebar@1.0.0

Step 13: Create AppHeader.tsx in components
---
import { AppBar, Box, IconButton, Toolbar } from "@mui/material"
import MenuIcon from '@mui/icons-material/Menu'
import SettingsIcon from '@mui/icons-material/Settings'
import LogoutIcon from '@mui/icons-material/Logout'

const AppHeader = () => {

    return (
        <AppBar position="sticky" sx={styles.appBar}>
            <Toolbar>
                <IconButton color="secondary">
                    <MenuIcon />
                </IconButton>
                <Box
                    component={'img'}
                    sx={styles.appLogo}
                    src="/assets/logo_round.png" />
                <Box sx={{ flexGrow: 1 }} />
                <IconButton title="Settings" color="secondary">
                    <SettingsIcon />
                </IconButton>
                <IconButton title="Sign Out" color="secondary">
                    <LogoutIcon />
                </IconButton>
            </Toolbar>
        </AppBar>
    )
}

const styles = {
    appBar: {
        // bgcolor: 'neutral.main'
        bgcolor: 'teal'
    },
    appLogo: {
        borderRadius: 2,
        width: 40,
        marginLeft: 2,
        cursor: 'pointer'
    }
}

export default AppHeader

Step 14: Create SideNav.tsx in src/components
---
import { Avatar, Box, Typography } from "@mui/material"
import { Menu, MenuItem, Sidebar } from "react-pro-sidebar"
import DashboardOutlinedIcon from '@mui/icons-material/DashboardOutlined'
import StyleOutlinedIcon from '@mui/icons-material/StyleOutlined'
import SourceOutlinedIcon from '@mui/icons-material/SourceOutlined'
import AnalyticsOutlinedIcon from '@mui/icons-material/AnalyticsOutlined'

const SideNav = () => {
    return (
        <Sidebar
            style={{ height: "100%", top: 'auto' }}
            breakPoint="md"
            backgroundColor={'white'}
        >
            <Box sx={styles.avatarContainer}>
                <Avatar sx={styles.avatar} alt="Masoud" src="/assets/samit.jpg" />
                <Typography variant="body2" sx={styles.yourChannel}>Samit Koyom</Typography>
                <Typography variant="body2">Administrator</Typography>
            </Box>

            <Menu
                menuItemStyles={{

                }}>
                <MenuItem icon={<DashboardOutlinedIcon />}> <Typography variant="body2">Dashboard</Typography> </MenuItem>
                <MenuItem icon={<SourceOutlinedIcon />}> <Typography variant="body2">Product </Typography></MenuItem>
                <MenuItem icon={<AnalyticsOutlinedIcon />}> <Typography variant="body2">Report </Typography></MenuItem>
                <MenuItem icon={<StyleOutlinedIcon />}> <Typography variant="body2">Setting </Typography></MenuItem >
            </Menu >
        </Sidebar >
    )
}

const styles = {
    avatarContainer: {
        display: "flex",
        alignItems: "center",
        flexDirection: 'column',
        my: 5
    },
    avatar: {
        width: '40%',
        height: 'auto'
    },
    yourChannel: {
        mt: 1
    }
}

export default SideNav

Step 15: Create BackendLayout.tsx in src/layouts
---
import { Outlet } from "react-router-dom"
import { Box } from "@mui/material"
import CssBaseline from "@mui/material/CssBaseline"
import AppHeader from "../components/AppHeader"
import SideNav from "../components/SideNav"

const BackendLayout = () => {
  return (
    <>
        <CssBaseline />
        <AppHeader />
        <Box sx={styles.container}>
          <SideNav />
          <Box component={"main"} sx={styles.mainSection}>
            <Outlet />
          </Box>
        </Box>
    </>
  )
}

const styles = {
  container: {
    display: "flex",
    bgcolor: "neutral.light",
  },
  mainSection: {
    px: 4,
    width: "100%",
    height: "100%",
    overflow: "auto",
  },
}

export default BackendLayout

Step 16: Create Login.tsx in src/pages
---
const Login = () => {
  return (
    <>
        <h1>Login</h1>
    </>
  )
}

export default Login

Step 17: Create Dashboard.tsx in src/pages
---
const Dashboard = () => {
  return (
    <>
        <h1>Dashboard</h1>
    </>
  )
}

export default Dashboard

Step 18: install react-router-dom
---
npm install react-router-dom@6

Step 19: config ProSidebarProvider in main.tsx
---
// Import ProSidebarProvider
import { ProSidebarProvider } from 'react-pro-sidebar'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ProSidebarProvider>
      <ThemeProvider theme={theme}>
        <App />
      </ThemeProvider>
    </ProSidebarProvider>
  </React.StrictMode>,
)

Step 20: กำหนด Routing ที่ไฟล์ App.tsx
---
import { BrowserRouter, Route, Routes } from 'react-router-dom'
import Login from './pages/Login'
import BackendLayout from './layouts/BackendLayout'
import AuthLayout from './layouts/AuthLayout'

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route element={<AuthLayout />}>
          <Route path="/" element={<Login />} />
        </Route>
        <Route element={<BackendLayout />}>
          <Route path="/backend/dashboard" element={<h1>Dashboard</h1>} />
        </Route>
      </Routes>
    </BrowserRouter>
  )
}

export default App

Step 21: Create Product.tsx, Report.tsx, Setting.tsx in src/pages
---

const Product = () => {
    return (
      <>
          <h1>Product</h1>
      </>
    )
  }
  
  export default Product


Step 22: Config Route in App.tsx
---

import { BrowserRouter, Route, Routes } from 'react-router-dom'
import Login from './pages/Login'
import BackendLayout from './layouts/BackendLayout'
import AuthLayout from './layouts/AuthLayout'

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route element={<AuthLayout />}>
          <Route path="/" element={<Login />} />
        </Route>
        <Route element={<BackendLayout />}>
          <Route path="/backend/dashboard" element={<h1>Dashboard</h1>} />
          <Route path="/backend/product" element={<h1>Product</h1>} />
          <Route path="/backend/report" element={<h1>Report</h1>} />
          <Route path="/backend/setting" element={<h1>Setting</h1>} />
        </Route>
      </Routes>
    </BrowserRouter>
  )
}

export default App

Step 23: Set Link in SideNav.tsx
---
<MenuItem component={<Link to="/backend/dashboard" />} icon={<DashboardOutlinedIcon />}> <Typography variant="body2">Dashboard</Typography> </MenuItem>
                <MenuItem component={<Link to="/backend/product" />} icon={<SourceOutlinedIcon />}> <Typography variant="body2">Product </Typography></MenuItem>
                <MenuItem component={<Link to="/backend/report" />} icon={<AnalyticsOutlinedIcon />}> <Typography variant="body2">Report </Typography></MenuItem>
                <MenuItem component={<Link to="/backend/setting" />} icon={<StyleOutlinedIcon />}> <Typography variant="body2">Setting </Typography></MenuItem >

Step 24: Toggle SideNav
---
import { useProSidebar } from "react-pro-sidebar"

const AppHeader = () => {

// useProSidebar hook
  const { collapseSidebar, toggleSidebar, broken } = useProSidebar()

}

 <IconButton onClick={()=> broken ? toggleSidebar() : collapseSidebar()}
            color="secondary">
                <MenuIcon />
            </IconButton>

Step 25: Create Login Screen
---
import { TextField, Button } from "@mui/material"

const Login = () => {
  return (
    <>
        <h1>Login</h1>
        <form>
          <div>
            <TextField label="Username"
              type="text"
              variant="outlined"
            />
          </div>

          <div>
            <TextField label="Password"
              type="password"
              variant="outlined"
            />
          </div>
          <div>
            <Button variant="contained" color="primary" type="submit">
              Login
            </Button>
          </div>
        </form>
    </>
  )
}

export default Login


Step 26: การจัดการกับแบบฟอร์มด้วย react-hook-form
---
ติดตั้ง
npm install react-hook-form@7

เรียกใช้งานที่หน้า Login.tsx
---
import { TextField, Button } from "@mui/material"
import { useForm } from "react-hook-form"

const Login = () => {

  // useForm hook
  const { register, handleSubmit, formState: { errors } } = useForm()

  // onSubmit function
  const onSubmit = (data: any) => {
    console.log(data)
  }

  return (
    <>
        <h1>Login</h1>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div>
            <TextField label="Username"
              type="text"
              variant="outlined"
              {...register("username", { required: true, minLength: 5 })}
              error={errors.username ? true : false}
              helperText={errors.username ? "Username is required" : ""}
            />
          </div>

          <div>
            <TextField label="Password"
              type="password"
              variant="outlined"
              {...register("password", { required: true })}
              error={errors.password ? true : false}
              helperText={errors.password ? "Password is required" : ""}
            />
          </div>
          <div>
            <Button variant="contained" color="primary" type="submit">
              Login
            </Button>
          </div>
        </form>
    </>
  )
}

export default Login



